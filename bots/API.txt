# Winter 2020
Implement a class with an action method which takes the same arguments as shown by sample_bot.js You will take three arguments your_state, world_state, and helper. Return a set of Action.

your_state
A map containing the following keys
{
    "Ship": [A map of ID -> ship_status]
    "Planet": [A map of ID -> planet_status]
}

world_state
A map containing the following keys
{
    "Ship": [A map of ID -> ship_status]
    "Planet": [A map of ID -> planet_status]
    "Events": [Events map]
    "Alive Players": [A set of (owner) strings]
}

planet_status
A map containing the following keys
{
    "Health": [A non-negative integer]
    "ID": [A unique integer]
    "Owner": [A string]
}

ship_status
A map containing the following keys
{
    "Health": [A non-negative integer],
    "ID": [A unique integer],
    "Owner": [A string],
    "Source ID": [The ID of the source ship/planet]
    "Source Type": ["Ship" or "Planet"]
    "Target": [A country ID]
    "Delay": [A number corresponding until time to hit target]
}

Actions (Idle)
new Set(); // The empty set contains no actions

Actions (Attack)
Set containing an Action (Attack)

Action (Attack)
{
    "Health": [An integer]
    "Type": "Attack"
    "Source ID": [The ID of the source ship/planet]
    "Source Type": ["Ship" or "Planet"]
    "Target": [A country ID]
}

Events
{
    "Player": [Set of Action (Attack) which happened this turn]
    "Death": [Set of Action (Attack) which killed a player this turn]
    "Hit": [Set of Action (Attack) which hit a player this turn]
}

Active Weapon
{
    "Delay": [A number representing the delay until the weapon hits its target]
    "Event": [Action (Attack)]
}
